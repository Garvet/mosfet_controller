#ifndef __UART_H__
#define __UART_H__

#include "stm32f1xx.h"


// ----- ----- ----- ----- -----
// ----- ----- UART1 ----- -----
// ----- ----- ----- ----- -----
//  ПОРТЫ:
//   |     |  DEFAULT | REMAP |
//   | TX1 |    PA9   |  PB6  |
//   | RX1 |    PA10  |  PB7  |
//  
//  ШИНА: APB2
// ----- ----- ----- ----- -----

// ----- ----- -----
// ----- UART2 -----
// ----- ----- -----
// ПОРТЫ:
//  |     |  DEFAULT | REMAP |
//  | TX2 |    PA2   |  PD5  |
//  | RX2 |    PA3   |  PD6  |
//  
// ШИНА: APB1
// ----- ----- -----


typedef struct {
  uint32_t bus_freq;    //частота шины UART
  uint32_t baud;        //скорость передачи
  uint8_t data_bits;    //количество бит данных (8, 9)
  uint8_t stop_bits;    //количество стоп-бит (1 или 2)
  uint8_t parity;       //контроль четности (0 - нет, 1 - even, 2 - odd)
} UARTInitStructure_t;

// --- Инициализация UART --- 
// -> id - номер порта
// -> init - структура инициализации UART
// <- Return: 0 - успех, -1 - ошибка инициализации
int16_t UART_init(uint8_t id, const UARTInitStructure_t *init);

// --- Записать символ в буфер передатчика --- 
// -> id - номер порта
// -> symbol - передававемый символ
// <- Retrun: symbol - успех, -1 - ошибка, буфер переполнен
int16_t UART_put(uint8_t id, uint8_t symbol);

// --- Прочитать симпов из буфера приемника --- 
// -> id - номер порта
// <- Return: -1 - нет данных для чтения, 0..255 - прочитанный символ
int16_t UART_get(uint8_t id);

// --- Записать символ в буфер передатчика, с ожиданием начала --- 
// -> id - номер порта
// -> symbol - передававемый символ
// <- Retrun: size - успех, -1 - ошибка, не тот id
int16_t UART_print(uint8_t id, uint8_t symbol);

// --- Прочитать симпов из буфера приемника --- 
// -> id - номер порта
// <- Return: -1 - ошибка, не тот id, 0..255 - прочитанный символ
int16_t UART_scan(uint8_t id);

/*
// --- Получить количество непрочитанных байт в буфере приемника --- 
int16_t UART_bytesRB(uint8_t id);

// --- Получить количество еще не отправленных байт в буфере передатчика --- 
int16_t UART_bytesWB(uint8_t id);

// --- Очистить буфер приемника --- 
void UART_clearRB(uint8_t id);

// --- Очистить буфер передатчика --- 
void UART_clearWB(uint8_t id);
*/

#endif